/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IAddressProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getACL"
      | "getAccountFactory"
      | "getContractsRegister"
      | "getDataCompressor"
      | "getGearToken"
      | "getLeveragedActions"
      | "getPriceOracle"
      | "getTreasuryContract"
      | "getWETHGateway"
      | "getWethToken"
      | "version",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;

  encodeFunctionData(functionFragment: "getACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountFactory",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsRegister",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getDataCompressor",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getGearToken",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getLeveragedActions",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryContract",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHGateway",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getWethToken",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsRegister",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataCompressor",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeveragedActions",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryContract",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHGateway",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [service: BytesLike, newAddress: AddressLike];
  export type OutputTuple = [service: string, newAddress: string];
  export interface OutputObject {
    service: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAddressProvider extends BaseContract {
  connect(runner?: ContractRunner | null): IAddressProvider;
  waitForDeployment(): Promise<this>;

  interface: IAddressProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  getACL: TypedContractMethod<[], [string], "view">;

  getAccountFactory: TypedContractMethod<[], [string], "view">;

  getContractsRegister: TypedContractMethod<[], [string], "view">;

  getDataCompressor: TypedContractMethod<[], [string], "view">;

  getGearToken: TypedContractMethod<[], [string], "view">;

  getLeveragedActions: TypedContractMethod<[], [string], "view">;

  getPriceOracle: TypedContractMethod<[], [string], "view">;

  getTreasuryContract: TypedContractMethod<[], [string], "view">;

  getWETHGateway: TypedContractMethod<[], [string], "view">;

  getWethToken: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "getACL",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountFactory",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractsRegister",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataCompressor",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGearToken",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLeveragedActions",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriceOracle",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasuryContract",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWETHGateway",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWethToken",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddressSet",
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;

  filters: {
    "AddressSet(bytes32,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
  };
}
